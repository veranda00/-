#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>
#define SIZE 1000

double calc(char *str);
double prior_3(char *str, int *id);
double prior_2(char *str, int *id);
double prior_1(char *str, int *id);
double num(char *str, int *id);

int main()
{
    char str[SIZE];
    printf("Expression: ");
    fgets(str, SIZE, stdin);
    printf("Result: %lf", calc(str));
    return 0;
}

double calc(char *str)
{
    int i = 0;
    return prior_3(str, &i);
}

double prior_3(char *str, int *id)
{
    double result = prior_2(str, id);

    while (str[*id] == '+' || str[*id] == '-')
    {
        switch (str[*id])
        {
        case '+':
            ++*id;
            result += prior_2(str, id);
            break;

        case '-':
            ++*id;
            result -= prior_2(str, id);
            break;
        }
    }
    return result;
}

double prior_2(char *str, int *id)
{
    double result = prior_1(str, id);
    double div;

    while (str[*id] == '*' || str[*id] == '/')
    {
        switch (str[*id])
        {
        case '*':
            ++*id;
            result *= prior_1(str, id);
            break;

        case '/':
            ++*id;
            div = prior_1(str, id);
            if (div != 0.0)
                result /= div;
            else
            {
                printf("Division by zero!\n");
                exit(EXIT_FAILURE);
            }
            break;
        }
    }
    return result;
}

double prior_1(char *str, int *id)
{
    double result;
    int sign = 1;

    if (str[*id] == '-')
    {
        sign = -1;
        ++*id;
    }

    if (str[*id] == '(')
    {
        ++*id;
        result = prior_3(str, id);

        if (str[*id] != ')')
        {
            printf("Brackets unbalanced!\n");
            exit(EXIT_FAILURE);
        }

        ++*id;
    }
    else
        result = num(str, id);

    if (str[*id] == '^')
    {
        ++*id;
        result = pow(result, prior_1(str, id));
    }

    return sign * result;
}

double num(char *str, int *id)
{
    double result = 0.0;
    double div = 10.0;
    int sign = 1;

    if (str[*id] == '-')
    {
        sign = -1;
        ++*id;
    }

    while (isdigit(str[*id]))
    {
        result = result * 10.0 + (str[*id] - '0');
        ++*id;
    }

    if (str[*id] == '.')
    {
        ++*id;

        while (isdigit(str[*id]))
        {
            result += (str[*id] - '0') / div;
            div *= 10.0;
            ++*id;
        }
    }

    return sign * result;
}
